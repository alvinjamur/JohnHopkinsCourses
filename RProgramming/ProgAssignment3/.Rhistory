rankall("penumonia", "TX")
rankall("penumonia", "BEST")
rankall("TX", "BEST")
head(rankall("heart attack", 10),10)
setwd("D:/JohnHopkinsDataScience/R Programming/ProgAssignment3")
head(rankall("heart attack", 0),10)
head(rankall("heart attack", 10),10)
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
# Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
# Check if state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) {
stop("invalid outcome")
}
validState = sort(unique(data[,7]))
if (!state %in% validState) {
stop("invalid state")
}
# convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
# For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
# hospital name in state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),
data.state[["Hospital.Name"]],
decreasing=FALSE,na.last=NA), ]
# handle numeric input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
# Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack", 20), 10)
## rankall.R
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("./ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack", 20), 10)
## rankall.R
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack", 20), 10)
setwd("D:/JohnHopkinsDataScience/R Programming/ProgAssignment3")
rankall <- function(outcome, num = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
## Check that state and outcome are valid
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(num)) {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][num, "hospital"], by_state[[i]][, "state"][1])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, row.names = result[, 2], stringsAsFactors = FALSE)
names(output) <- c("hospital", "state")
} else if (!is.numeric(num)) {
if (num == "best") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else if (num == "worst") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"],
decreasing = TRUE), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else {
stop('invalid num')
}
}
return(output)
}
# example output:
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
head(rankall("heart attack", 20), 10)
setwd("D:/JohnHopkinsDataScience/R Programming/ProgAssignment3")
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings="Not Available")
# Get valid state and outcome
validoutcome = c("heart attack","heart failure","pneumonia")
validstate = unique(data[,7])
# ...then check that they are valid
if (!outcome %in% validoutcome) {
stop("invalid outcome")
}
if (!state %in% validstate) {
stop("invalid state")
}
# we need a few relevant columns to make a decision about best hospital
relevantcolname <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colname <- relevantcolname[match(outcome,validoutcome)]
# Grab all the data of the relevant state and omit NA
dataofstate <- na.omit( data[ data$State == state, ] )
# Get the index where the min of the 'relevantcolname' lies
index <- which.min( as.numeric(dataofstate[ , colname]) )
# then look at the corresponding hospital name which happens to be the best in state
dataofstate[index, "Hospital.Name"]
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
setwd("D:/JohnHopkinsDataScience/R Programming/ProgAssignment3")
rankhospital <- function(state, outcome, num = "best") {
# Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings="Not Available")
# Get valid state and outcome
validoutcome = c("heart attack","heart failure","pneumonia")
validstate = unique(data[,7])
# ...then check that they are valid
if (!outcome %in% validoutcome) {
stop("invalid outcome")
}
if (!state %in% validstate) {
stop("invalid state")
}
# we need a few relevant columns to make a decision about best hospital
relevantcolname <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colname <- relevantcolname[match(outcome,validoutcome)]
# Return hospital name in that state with the given rank 30-day death rate
dataofstate <- data[ data$State == state, ]
# sort the data of state by outcome
sorteddataofstate <- dataofstate[order(as.numeric(dataofstate[[colname]]), dataofstate[["Hospital.Name"]],
decreasing=FALSE, na.last=NA), ]
# handling numeric input for sorting
if (num=="best") {
num = 1
}
if (num=='worst') {
num = nrow(sorteddataofstate)
}
sorteddataofstate[num,"Hospital.Name"]
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
setwd("D:/JohnHopkinsDataScience/R Programming/ProgAssignment3")
rankall <- function(outcome, num = "best") {
# Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings="Not Available")
# Check if state and outcome are valid
validOutcome = c("heart attack", "heart failure", "pneumonia")
if (!outcome %in% validOutcome) {
stop("invalid outcome")
}
validState = sort(unique(data[,7]))
if (!state %in% validState) {
stop("invalid state")
}
# convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
# For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
# hospital name in state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),
data.state[["Hospital.Name"]],
decreasing=FALSE,na.last=NA), ]
# handle numeric input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
# Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
rankall <- function(outcome, num = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
## Check that state and outcome are valid
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(num)) {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][num, "hospital"], by_state[[i]][, "state"][1])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, row.names = result[, 2], stringsAsFactors = FALSE)
names(output) <- c("hospital", "state")
} else if (!is.numeric(num)) {
if (num == "best") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else if (num == "worst") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"],
decreasing = TRUE), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else {
stop('invalid num')
}
}
return(output)
}
# example output:
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
}
# example output:
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
best("AK", "pneumonia")
setwd("D:/JohnHopkinsDataScience/R Programming/ProgAssignment3")
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings="Not Available")
# Get valid state and outcome
validoutcome = c("heart attack","heart failure","pneumonia")
validstate = unique(data[,7])
# ...then check that they are valid
if (!outcome %in% validoutcome) {
stop("invalid outcome")
}
if (!state %in% validstate) {
stop("invalid state")
}
# we need a few relevant columns to make a decision about best hospital
relevantcolname <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colname <- relevantcolname[match(outcome,validoutcome)]
# Grab all the data of the relevant state and omit NA
dataofstate <- na.omit( data[ data$State == state, ] )
# Get the index where the min of the 'relevantcolname' lies
index <- which.min( as.numeric(dataofstate[ , colname]) )
# then look at the corresponding hospital name which happens to be the best in state
dataofstate[index, "Hospital.Name"]
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
setwd("D:/JohnHopkinsDataScience/R Programming/ProgAssignment3")
rankhospital <- function(state, outcome, num = "best") {
# Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings="Not Available")
# Get valid state and outcome
validoutcome = c("heart attack","heart failure","pneumonia")
validstate = unique(data[,7])
# ...then check that they are valid
if (!outcome %in% validoutcome) {
stop("invalid outcome")
}
if (!state %in% validstate) {
stop("invalid state")
}
# we need a few relevant columns to make a decision about best hospital
relevantcolname <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colname <- relevantcolname[match(outcome,validoutcome)]
# Return hospital name in that state with the given rank 30-day death rate
dataofstate <- data[ data$State == state, ]
# sort the data of state by outcome
sorteddataofstate <- dataofstate[order(as.numeric(dataofstate[[colname]]), dataofstate[["Hospital.Name"]],
decreasing=FALSE, na.last=NA), ]
# handling numeric input for sorting
if (num=="best") {
num = 1
}
if (num=='worst') {
num = nrow(sorteddataofstate)
}
sorteddataofstate[num,"Hospital.Name"]
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
## Check that state and outcome are valid
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(num)) {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][num, "hospital"], by_state[[i]][, "state"][1])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, row.names = result[, 2], stringsAsFactors = FALSE)
names(output) <- c("hospital", "state")
} else if (!is.numeric(num)) {
if (num == "best") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else if (num == "worst") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"],
decreasing = TRUE), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else {
stop('invalid num')
}
}
return(output)
}
# example output:
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
# example output:
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
# example output:
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
# example output:
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
setwd("D:/JohnHopkinsDataScience/R Programming/ProgAssignment3")
rankall <- function(outcome, num = "best") {
# Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings="Not Available")
# Check if state and outcome are valid
validOutcome = c("heart attack", "heart failure", "pneumonia")
if (!outcome %in% validOutcome) {
stop("invalid outcome")
}
validState = sort(unique(data[,7]))
if (!state %in% validState) {
stop("invalid state")
}
# convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
# For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
# hospital name in state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),
data.state[["Hospital.Name"]],
decreasing=FALSE,na.last=NA), ]
# handle numeric input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
# Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
